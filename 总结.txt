



对防爆厂商进行分类评级：
	采集数据-》确定采集目标



前期工作
	


爬虫系统
	代理IP池：定时获取IP并进行筛选
	数据库连接池：避免数据库连接频繁创建与销毁
			对使用者而言：连接=从连接池获取已有连接
						销毁=释放连接回连接池
	多线程：提升采集速度，通过threading.Event对象实现线程的可控性：休眠、停止、恢复
	解析：使用Xpath、正则表达式进行 数据解析

分类系统
	爬虫系统采集的成果
	分类方式：数据统计
	基于排序的评级分类方式：统计出厂商的各项指标，按指标对厂商进行排名，为避免出现并列排名，增加二级、三级排名指标
		特点：稳定、实现简单（order by）、可设置指标权重以及每个级别的厂商比重
	基于K-means的评级分类方式：以厂商各项指标值建立向量模型，使用K-means聚类算法对这些向量进行聚类，介绍一下算法～
		特点：非监督算法、不稳定、每个类别的厂商数量以及指标权重不可控

		
查询系统
	基于python，容器：waitress 
	web框架：falcon
	路由规则：静态资源、动态资源，
	鉴权机制：
		session-cookie控制：
			用户登录成功——生成session
			用户访问资源——更新session的last_time
			用户登出——删除session（后端）、cookie（前端）
			用户超时未操作——删除session（后端）
			SESSION类实现session的管理，定期检测，删除session

		中间件（middlerware）：影响整个web应用，全局干预请求——响应 流水线
		钩子（hook）：影响 “被勾住” 的资源

	前后端通信：
		Ajax：异步加载、局部刷新，减少传输流量、提升用户体验
		将Ajax请求放在web woker里执行，避免阻塞
			存在的问题：同时发出多个请求时，会出现收发混乱的情况
			解决方式：为每个请求分配一个ajax_id
	可视化：canvas：自由度高；echarts：百度图形库，支持多种图表，可定制度高

基于浏览器的分布式爬虫（使用ajax技术实现网络爬虫）：
	分布式爬虫的优点：速度快（有多少台主机就有多少个“线程”）、避免出现IP封禁
	由于浏览器的同源安全策略（同源：协议、端口、域名都相同），不同源的网络请求会被浏览器截断（请求会发出以及响应，但浏览器检测到不同源会丢弃响应包并抛出异常）
	解决跨域的方式：JSONP、CORS、代理
	以上方式存在的问题：需要后端配合，对于爬虫来说不能解决问题

	我的解决方式：
		将js爬虫制作成浏览器插件
		浏览器插件不存在同源限制
	分布式爬虫结构：
		1、浏览器向服务器发出任务请求（服务器提供一个发布任务的公共接口）
		2、浏览器收到返回的任务包后取出其中的参数对、要爬取的url开始爬取
		3、浏览器将爬取结果整理缓存
		4、所有爬取任务完成后浏览器将爬取结果进行打包，将爬取结果一次性提交到任务包中指定的提交接口
			由于提交时的数据较多，post data是一个json字符串，原来的json内部含有数组，若直接传输后端只能收到数组中的最后一个值，而且当提交的数据中含有特殊字符后端在提出数据的时候也会出现问题，解决办法：在提交前先将json对象转成json字符串，再使用base64编码对json字符串进行编码，将部分特殊字符映射成可打印字符串（a-Z0-9+/=）, 这样处理后发现后端提出数据时会把“+”识别成空格，所以还需要替换字符串。
			一次性提交结果可减少建立连接的开销
			
			后期可引入奖励机制，用户安装插件，获取任务，完成任务提交数据获取奖励，这也算是区块链模式的一个实际运用
	

	
	

	
	


